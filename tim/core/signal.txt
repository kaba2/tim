Signal class
============

[Back to TIM C++ implementation][Parent]

[Parent]: tim_cpp.htm

Files
-----

### Signal class

[signal.cpp][1]

[signal.h][2]

[signal.hpp][3]

[1]: signal.cpp.htm
[2]: signal.h.htm
[3]: signal.hpp.htm

### Tools to generate various signals

[signal_generate.cpp][4]

[signal_generate.h][5]

[4]: signal_generate.cpp.htm
[5]: signal_generate.h.htm

### Tools for working with Signal's

[signal_tools.cpp][6]

[signal_tools.h][7]

[signal_tools.hpp][8]

[6]: signal_tools.cpp.htm
[7]: signal_tools.h.htm
[8]: signal_tools.hpp.htm

Theory
------

The Signal class represents a time-series in R^n. If the number of stored 
samples from the time series is m, the data is stored as an nxm-matrix. This
data can be manipulated directly via the Matrix class from the Pastel library.

Signal aliasing
---------------

A Signal can use existing memory, given extents and a pointer to memory.
This is called aliasing. You can use this ability to import data from
other applications. However, remember that the data is assumed to be
in row-major order (for example, Matlab uses column-major order).

Matrix interface
----------------

The signal data is accessed directly as a Matrix object. The
Matrix class has a rich interface for the modification of signals.
See the documentation for the Matrix class in Pastel library.
Here we just mention the most important ones:

* A Matrix can be accessed via 2d (i, j)-indexing .
* A Matrix can be accessed as a 1d sequence of values via iterators
to enable the use of STL algorithms where appropriate.
* Submatrices of a Matrix can be accessed in Matlab style, e.g.
M(Range(0, 1), Range(0, 10, 2)).

See also
--------

[Matrix class in Pastel library]: pastel/geometry/matrix.txt
