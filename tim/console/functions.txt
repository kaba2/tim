Built-in functions
==================

[[Parent]]: tim_console.txt

TIM Console interface defines a set of functions
which are used to compute the needed estimates.
Because the used scripting language does not support conversions,
it is important to use arguments with the right types.
The intepreter will emit errors when this is not the case.
The definitions and names of these functions have been
made similar to those in the TIM Matlab interface. For documentation,
refer to the documentation of the TIM Matlab interface
functions.

Built-in functions
------------------

The function definitions are given in the following form:

	function-name '(' (parameter-name ('=' default-value)? : parameter-type) % ',' ')' : return-type

### Delay-embedding

	delay_embed(
		input : signal,
		k : integer,
		t0 = 0 : integer,
		dt = 1 : integer) : signal
		
	delay_embed_future(
		input : signal,
		k : integer,
		t0 = 0 : integer,
		dt = 1 : integer) : signal
		
See [[Link: embed.txt]].

### Import functions

	read_csv(
		filename : string,
		samples = 0 : integer,
		dimension = 1 : integer,
		trials = 1 : integer,
		series = 1 : integer,
		separatorSet = ",;" : string,
		order = [0, 1, 2, 3] : real-array) : cell-array
		
This function reads data from a simple list of values separated by separator characters.
Because the data is stored 'flat' in the file, you need to specify in the function call
the dimension and the number of samples each signal has, as well as the number of trials
for each signal and the number of series. The effect of this function is to read the 
data from the file and split this flat data into a cell-array of signals.
In case only the filename is given, the function reads as many samples as possible 
(and assumes the default values for other parameters).

Values are separated by white-space. However, if there are additional one-character 
separators between values, these can be ignored by specifying them in the 'separatorSet'
string.

Because multi-dimensional data can be flattened in various ways, we also provide 
the 'order' parameter to be able to set the assumed flattening order. It is interpreted
as an integer array which must contain exactly the elements 0, 1, 2, and 3, in some order.
The extents of the order array do not matter, since it is considered by its linearization.
The correspondences are as follows:

 * 0 corresponds to iteration over samples
 * 1 corresponds to iteration over dimensions
 * 2 corresponds to iteration over trials
 * 3 corresponds to iteration over series'
	
The 'order' tuple then defines the priority of iteration (or order of flattening) for the 
data. Notice that the numbers correspond to the order of the parameters in the function.

### Export functions

	write_csv(
		filename : string,
		data : cell-array,
		order = [0, 1, 2, 3] : real-array,
		separatorLevel0 : string = ",",
		separatorLevel1 : string = ",",
		separatorLevel2 : string = ",",
		separatorLevel3 : string = ",",
		prefixLevel0 : string = "",
		suffixLevel0 : string = "",
		prefixLevel1 : string = "",
		suffixLevel1 : string = "",
		prefixLevel2 : string = "",
		suffixLevel2 : string = "",
		prefixLevel3 : string = "",
		suffixLevel3 : string = "",
		prefixLevel4 : string = "",
		suffixLevel4 : string = "") : integer

This function writes data from a cell-array to a text file.
The cell-array is flattened to a linear list of values as specified
by the 'order' argument: to understand its meaning, see the
documentation for the 'read_csv' function above.
The function always returns integer 0: this is simply because
the language does not have a void type.

Since the 'order' argument permutes the order of iterations,
we shall call the iteration levels 0, 1, 2, and 3, with level 0
corresponding to the fastest changing iteration.
Each level can have its values separated by a separator string via
'separatorLevelX'. Also, each level can be prefixed and suffixed with 
'prefixLevelX' and 'suffixLevelX', respectively. For example,
the following function call results in similar output as
TIM Console takes as input:

	write_csv(
		"output.txt", 
		data, 
		[0, 1, 2, 3],
		",", ";", ",", ";", 
		"", "", 
		"", "", 
		"[", "]", 
		"", "", 
		"{", "}");

In this example, values are separated with a comma and rows are separated 
with a semi-colon. Signals in a cell-array are separated similarly.
Signals are prefixed with '[' and suffixed with ']'. The whole cell-array
is prefixed with '{' and suffixed with '}'.

### Shannon differential entropy

	differential_entropy_kl(
		S : cell-array, 
		kNearest = 1 : integer) : real
		
	differential_entropy_kl_t(
		S : cell-array, 
		timeWindowRadius : integer, 
		kNearest = 1 : integer,
		filter = [1] : real-array) : real-array
	
	differential_entropy_nk(
		S : cell-array) : real-array
	
See [[Link: differential_entropy.txt]].

### Renyi entropy

	renyi_entropy_lps(
		S : cell-array, 
		q = 2.0 : real,
		kNearestSuggestion = 0 : integer) : real
		
	renyi_entropy_lps_t(
		S : cell-array,
		timeWindowRadius : integer,
		q = 2.0 : real,
		kNearestSuggestion = 0 : integer,
		filter = [1] : real-array) : real-array

See [[Link: renyi_entropy.txt]].

### Tsallis entropy

	tsallis_entropy_lps(
		S : cell-array, 
		q = 2.0 : real,
		kNearestSuggestion = 0 : integer) : real
		
	tsallis_entropy_lps_t(
		S : cell-array,
		timeWindowRadius : integer,
		q = 2.0 : real,
		kNearestSuggestion = 0 : integer,
		filter = [1] : real-array) : real-array

See [[Link: tsallis_entropy.txt]].

### Divergence	

	divergence_wkv(
		X : cell-array, 
		Y : cell-array) : real

See [[Link: divergence.txt]].
	
### Mutual information
	
	mutual_information(
		X : cell-array, 
		Y : cell-array,
		xLag = 0 : integer,
		yLag = 0 : integer,
		kNearest = 1 : integer) : real
	
	mutual_information_t(
		X : cell-array, 
		Y : cell-array,
		timeWindowRadius : integer,
		xLag = 0 : integer,
		yLag = 0 : integer,
		kNearest = 1 : integer,
		filter = [1] : real-array) : real_array

See [[Link: mutual_information.txt]].

### Partial mutual information

	mutual_information_p(
		X : cell-array, 
		Y : cell-array,
		Z : cell-array,
		xLag = 0 : integer,
		yLag = 0 : integer,
		zLag = 0 : integer,
		kNearest = 1 : integer) : real_array

	mutual_information_pt(
		X : cell-array, 
		Y : cell-array,
		Z : cell-array,
		timeWindowRadius : integer,
		xLag = 0 : integer,
		yLag = 0 : integer,
		zLag = 0 : integer,
		kNearest = 1 : integer,
		filter = [1] : real-array) : real_array

See [[Link: partial_mutual_information.txt]].

### Transfer entropy

	transfer_entropy(
		X : cell-array, 
		Y : cell-array,
		W : cell-array,
		xLag = 0 : integer,
		yLag = 0 : integer,
		wLag = 0 : integer,
		kNearest = 1 : integer) : real
	
	transfer_entropy_t(
		X : cell-array, 
		Y : cell-array,
		W : cell-array,
		timeWindowRadius : integer,
		xLag = 0 : integer,
		yLag = 0 : integer,
		wLag = 0 : integer,
		kNearest = 1 : integer,
		filter = [1] : real-array) : real_array

See [[Link: transfer_entropy.txt]].

### Partial transfer entropy

	transfer_entropy_p(
		X : cell-array, 
		Y : cell-array,
		Z : cell-array,
		W : cell-array,
		xLag = 0 : integer,
		yLag = 0 : integer,
		zLag = 0 : integer,
		wLag = 0 : integer,
		kNearest = 1 : integer) : real_array

	transfer_entropy_pt(
		X : cell-array, 
		Y : cell-array,
		Z : cell-array,
		W : cell-array,
		timeWindowRadius : integer,
		xLag = 0 : integer,
		yLag = 0 : integer,
		zLag = 0 : integer,
		wLag = 0 : integer,
		kNearest = 1 : integer,
		filter = [1] : real-array) : real_array

See [[Link: partial_transfer_entropy.txt]].
