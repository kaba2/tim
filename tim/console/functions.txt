Built-in functions
==================

[Parent]: tim_console.txt

TIM Console interface defines a set of functions
which are used to compute the needed estimates.
Because the used scripting language does not support conversions,
it is important to use arguments with the right types.
The intepreter will emit errors when this is not the case.
The definitions and names of these functions have been
made similar to those in the TIM Matlab interface. For documentation,
refer to the documentation of the TIM Matlab interface
functions.

Built-in functions
------------------

The function definitions are given in the following form:

	function-name '(' (parameter-name ('=' default-value)? : parameter-type) % ',' ')' : return-type

### Differential entropy

	differential_entropy_kl(
		S : cell-array, 
		maxRelativeError = 0.0 : real, 
		kNearest = 1 : integer) : real
		
	differential_entropy_kl_t(
		S : cell-array, 
		timeWindowRadius : integer, 
		maxRelativeError = 0.0 : real, 
		kNearest = 1 : integer) : real-array
	
	differential_entropy_nk(
		S : cell-array, 
		maxRelativeError = 0 : real) : real-array
	
### Divergence	

	divergence_wkv(
		X : cell-array, 
		Y : cell-array) : real
	
### Mutual information
	
	mutual_information(
		X : cell-array, 
		Y : cell-array,
		xLag = 0 : integer,
		yLag = 0 : integer,
		kNearest = 1 : integer) : real
	
	mutual_information_t(
		X : cell-array, 
		Y : cell-array,
		timeWindowRadius : integer,
		xLag = 0 : integer,
		yLag = 0 : integer,
		kNearest = 1 : integer) : real_array

### Partial mutual information

	mutual_information_p(
		X : cell-array, 
		Y : cell-array,
		Z : cell-array,
		xLag = 0 : integer,
		yLag = 0 : integer,
		zLag = 0 : integer,
		kNearest = 1 : integer) : real_array

	mutual_information_pt(
		X : cell-array, 
		Y : cell-array,
		Z : cell-array,
		timeWindowRadius : integer,
		xLag = 0 : integer,
		yLag = 0 : integer,
		zLag = 0 : integer,
		kNearest = 1 : integer) : real_array

### Transfer entropy

	transfer_entropy(
		X : cell-array, 
		Y : cell-array,
		W : cell-array,
		xLag = 0 : integer,
		yLag = 0 : integer,
		wLag = 0 : integer,
		kNearest = 1 : integer) : real
	
	transfer_entropy_t(
		X : cell-array, 
		Y : cell-array,
		W : cell-array,
		timeWindowRadius : integer,
		xLag = 0 : integer,
		yLag = 0 : integer,
		wLag = 0 : integer,
		kNearest = 1 : integer) : real_array

### Partial transfer entropy

	transfer_entropy_p(
		X : cell-array, 
		Y : cell-array,
		Z : cell-array,
		W : cell-array,
		xLag = 0 : integer,
		yLag = 0 : integer,
		zLag = 0 : integer,
		wLag = 0 : integer,
		kNearest = 1 : integer) : real_array

	transfer_entropy_pt(
		X : cell-array, 
		Y : cell-array,
		Z : cell-array,
		W : cell-array,
		timeWindowRadius : integer,
		xLag = 0 : integer,
		yLag = 0 : integer,
		zLag = 0 : integer,
		wLag = 0 : integer,
		kNearest = 1 : integer) : real_array

