%option never-interactive nounput noyywrap
%option prefix = "console_"
%option yylineno

/* We would like the scanner not to include the unistd.h file
because it is not a standard file and does not exist on Windows.
Later versions of flex have the `%option nounistd`. Unfortunately
the latest flex version that can be found for Windows is 2.5.4
and it does not have this option. It is sufficient to create an
empty unistd.h file. However, creating the file in the current
directory will not do, because it is included as <unistd.h>,
that is, the current directory will not be searched.

The lexer can be generated by:
flex -olex_console_scanner.cpp console_scanner.l

In Visual Studio, you can make this automatic as a custom
build step. Right click on console_scanner.l, click on
Properties, and give the above as a custom build command.
Interestingly, the above does not work if the -o option
is on the right side. Also note that it is essential to
change the name of the output file to .cpp. Otherwise flex 
will output a .c file, which will be compiled as C code by
Visual Studio. This will give errors since the code is
actually C++.
*/

%{
#include <iostream>
#include <string>

#define YY_USER_ACTION \
	{ \
		console_lloc.first_line = yylineno; \
		console_lloc.last_line = yylineno; \
	}

#include "tim/console/console_scanner.h"

void console_error(char *s);
%}

ALPHA		[A-Z]|[a-z]|_
DIGIT		[0-9]
ALNUM		{ALPHA}|{DIGIT}
INTEGER		[+-]?[0-9]+
REAL_NAN	[Nn][Aa][Nn]
REAL_INF	[Ii][Nn][Ff]
REAL_NUMBER [0-9]*\.[0-9]+([Ee][+-]?[0-9]+)?
REAL		[+-]?({REAL_NAN}|{REAL_INF}|{REAL_NUMBER})
SHORTIES	[,;\[\]\*={}()]
STRING		\"[^\"]*\"
IDENTIFIER	{ALPHA}{ALNUM}*

%%

\/\/.*      {
				/* Eat C-style one-line comments */
			}

%.*         {
				/* Eat Matlab-style one-line comments */
			}

print		{
				return T_PRINT;
			}

{SHORTIES}	{ 
				return console_text[0]; 
			}

{INTEGER}	{
				console_lval.string = new std::string(console_text);
				return T_INTEGER; 
			}

{REAL}		{ 
				console_lval.string = new std::string(console_text);
				return T_REAL; 
			}

{IDENTIFIER}	{
					console_lval.string = new std::string(console_text);
					return T_IDENTIFIER;
				}

{STRING}	{
				std::string copy(console_text);
				console_lval.string = new std::string(copy.substr(1, copy.size() - 2));
				return T_STRING;
			}

[ \t\r\n]*	{
				/* Eat whitespace. */
			}

.			{ 
				console_error(""); 
				exit(1);	
			}


