Building TIM
============

[[Parent]]: tim.txt

This page describes how to build the TIM libraries. 

__Note__: While the source code contains Visual Studio specific 
build files, you should ignore them, and follow the build process 
described here.

[Main]: [[Ref]]: tim.txt
[Matlab]: [[Ref]]: building_matlab.txt

Build process
-------------

The steps to build TIM are as follows:

### Install [Mercurial][]

In Windows, you may want to use [TortoiseHg][], and in Mac Os X, [MacHg][].

[MacHg]: http://jasonfharris.com/machg/
[TortoiseHg]: http://tortoisehg.bitbucket.org/
[Mercurial]: http://mercurial.selenic.com/

### Install [CMake][]

CMake can be downloaded from [here][DownloadCMake]. 

[CMake]: http://www.cmake.org/
[DownloadCMake]: http://www.cmake.org/cmake/resources/software.html

### Install external libraries

See the [dependencies][Dependencies] page.

[Dependencies]: [[Ref]]: dependencies.txt
 
### Get TIM source code

We demonstrate this on the command-line; you may as well use
the GUIs above. In the command-line, in some proper directory, write

	hg clone https://bitbucket.org/kaba2/tim
	
The source code always reflects the current development; it is unstable. 
To obtain the source code corresponding to version 1.3.0, say, write

[[+Verbatim]]:
	hg update -r 1.3.0

The available tags can be obtained by

	hg tags

### Modify the CMake build file

In the TIM root directory, open the file `CMakeLists.txt`, and
scroll down to the section `Paths`. It will look something like 
this:

	# The directory of the Pastel library's source code.
	# The includes are of the form 'pastel/sys/array.h'
	set (PastelIncludeDirectory ../pastel)
	set (PastelLibraryDirectory ../pastel/lib)

	# The directory of the Boost library's source code.
	# The includes are of the form 'boost/static_assert.hpp'.
	set (BoostIncludeDirectory ../boost_1_53_0)

	# The directory of the Threading Building Blocks library's 
	# source code. The includes are of the form 'tbb/parallel_for.h'.
	set (TbbIncludeDirectory ../tbb42/include)

	# The directory of the Matlab header files.
	# The includes are of the form 'mex.h'.
	set (MatlabIncludeDirectory /Applications/MATLAB_R2013a.app/extern/include)

Modify the paths to correspond to your directory structure.

### Generate build-scripts using CMake

* In the TIM root directory, create the `release/` directory.
* In the TIM `release/` directory, type `cmake-gui ..`
* Press the `Configure` button.
* Select the tool-set to generate build-scripts for from the menu.
* Make sure the `Advanced` button is not checked.
* Select the desired build options.
* Press the `Configure` button again.
* Press the `Generate` button.

The build options are:

BuildLibraries
: Whether to build TIM's core libraries.

BuildMatlab
: Whether to build TIM's Matlab libraries.

BuildTests
: Whether to build TIM's test executables.

Note: If you want to change the tool-set later, you need
to remove the `CMakeCache.txt` file, and run these 
instructions again. The purpose of this file is to remember 
options so that they need not specified repeatedly.

Note: You can follow similar instructions to create a debug build
instead. The only difference is that you create a `debug/` directory,
and choose `Debug` as the `CMAKE_BUILD_TYPE` in `cmake-gui`.  

### Build

When CMake has generated you the build-scripts, you probably already
know how to proceed. Here are some specific examples.

#### Visual Studio

To build TIM using Visual Studio:

 * Open the solution file `Tim.sln` in Visual Studio.
 * Right click on the solution in Solution Explorer, and choose 
 Configuration Manager. 
 * Select the desired Active Solution Configuration.
 * Build solution.

#### Makefiles

To build TIM using makefiles, type 
	
	make -j 4

in the `release` directory. The `j` option specifies that `make`
should use 4 threads; this speeds the build with multi-core
machines. Depending on the number of cores in your machine,
you may want to increase or decrease this number.

Configurations
--------------

TIM comes with two different build configurations. These are:

 * debug
 * release

The `debug` configuration enables debugging information, turns on all
`ASSERT`s and `PENSURE`s, and disables multi-threaded processing. The 
`release` configuration enables optimizations and multi-threaded 
processing. You may choose the debug configuration in the CMake
GUI when generating the build-scripts. When using multi-configuration 
tools, such as Visual Studio, the debug configuration is selected 
inside the tool.

Output files
------------

The libraries and executables are written under the `lib/` directory. 
The intermediate files are written under the `release/` directory.


