Building TIM
============

[[Parent]]: tim.txt

This page describes how to build the TIM libraries. 

Compiler
--------

Since TIM uses C++20, it requires a recent compiler to
be built. Make sure you have one of the following:

 * Clang: 11 or later
 * GCC: 10 or later
 * Xcode: ? or later
 * Visual Studio: 2019 or later

If you also want to build the Matlab libraries, then the compiler
version must _match_ the version of the supported compiler in Matlab.
For example, Matlab 2013b supports GCC 4.7; GCC 4.8 will not work.

[CMake][]
---------

CMake can be downloaded from [here][DownloadCMake]. 

[CMake]: http://www.cmake.org/
[DownloadCMake]: http://www.cmake.org/cmake/resources/software.html

Build process
-------------

The steps to build TIM are as follows:

### Clone Tim from github

    cd ~
    mkdir code
    cd code
    git clone https://github.com/kaba2/tim

### Install external libraries

See the [dependencies][Dependencies] page.

[Dependencies]: [[Ref]]: dependencies.txt

Either install vcpkg:

    cd tim
    git clone https://github.com/microsoft/vcpkg
    ./vcpkg/bootstrap-vcpkg.sh
    ./vcpkg/vcpkg integrate bash

or alternatively create a symbolic link to an existing vcpkg:

    ln -s ../pastel/vcpkg vcpkg

### Modify the CMake build file

In the TIM root directory, open the file `CMakeLists.txt`, and
scroll down to the section `Paths`. It will look something like 
this:

	# The directory of the Matlab header files.
	# The includes are of the form 'mex.h'.
	set (MatlabIncludeDirectory /Applications/MATLAB_R2020b.app/extern/include)

Modify the paths to correspond to your directory structure.

### Generate build-scripts using CMake

    cmake -S . -DCMAKE_BUILD_TYPE=RelWithDebInfo -B build

The build options are:

BuildLibraries
: Whether to build TIM's core libraries.

BuildMatlab
: Whether to build TIM's Matlab libraries.

BuildTests
: Whether to build TIM's test executables.

Note: If you want to change the tool-set later, you need
to remove the `CMakeCache.txt` file, and run these 
instructions again. The purpose of this file is to remember 
options so that they need not specified repeatedly.

Note: You can follow similar instructions to create a debug build
instead.

### Build

When CMake has generated you the build-scripts, you probably already
know how to proceed. Here are some specific examples.

#### Visual Studio

To build TIM using Visual Studio:

 * Open the solution file `build/Tim.sln` in Visual Studio.
 * Right click on the solution in Solution Explorer, and choose 
 Configuration Manager. 
 * Select the desired Active Solution Configuration.
 * Build solution.

#### Makefiles

To build TIM using makefiles, type 

	cd build	
	make -j 4

in the `release` directory. The `j` option specifies that `make`
should use 4 threads; this speeds the build with multi-core
machines. Depending on the number of cores in your machine,
you may want to increase or decrease this number.

Configurations
--------------

TIM comes with different build configurations. These are:

 * Debug
 * Release
 * RelWithDebInfo

The `Debug` configuration enables debugging information, turns on all
`ASSERT`s and `PENSURE`s, and disables multi-threaded processing. The 
`Release` configuration enables optimizations and multi-threaded 
processing. You may choose the debug configuration in the CMake
GUI when generating the build-scripts. When using multi-configuration 
tools, such as Visual Studio, the debug configuration is selected 
inside the tool.

Output files
------------

The libraries and executables are written under the `lib/` directory. 
The intermediate files are written under the `release/` directory.


